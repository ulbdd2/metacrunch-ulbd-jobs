require "metacrunch/ulbd"
#require_relative "ora2mysql/helper"
require_relative "./common"

enable_debug()
#
# Options
#
options(require_args: false) do
  add :db, "-d", "--db DB", String, "Database Name", required: true
  add :login, "-l", "--login USERNAME", String, "Login for Database", required: true
  add :pw, "-p", "--password PASSWORD", String, "Password for Database", required: true
  add :add, "-r", "--recreate BOOL", Object, "Recreate Local Database", default: false
  add :bulk_size, "-b", "--bulk NUMBER", Integer, default: 1000
  add :zrkey, "-z", "--z00p_rec_key NUMBER", String, "import record with z00p_rec_key"
end
mab2vufind_transformation = Metacrunch::ULBD::Transformations::MabToVufind.new
logger = Logger.new(STDOUT)
if options[:add]
  last_record = 0
else
  last_record = get_last_record(options[:db], options[:login], options[:pw], "normalized_data", "z00p_timestamp").strftime("%Y%m%dT%H%M%S%z")
end
puts last_record
create_index(options[:db], options[:login], options[:pw], "normalized_data", "z00p_rec_key")
if options[:zrkey].to_s.empty?
  source Metacrunch::Db::Reader.new(options[:db], ->(db) {
    db[:z00p].where('z00p_timestamp>?',last_record).order(:z00p_timestamp)},{:user=>options[:login], :password=>options[:pw], :rows_per_fetch=>options[:bulk_size]})
else
  source Metacrunch::Db::Reader.new(options[:db], ->(db) {
    db[:z00p].where('z00p_rec_key=?',options[:zrkey]).order(:z00p_timestamp)},{:user=>options[:login], :password=>options[:pw], :rows_per_fetch=>options[:bulk_size]})
end
transformation ->(row) do
  #puts row[:z00p_status]
  if row[:z00p_status] == 'DELETED' then
    result = nil
  else
    result = JSON.pretty_generate(mab2vufind_transformation.call(row[:z00p_ptr]))
  end
  puts result
  {z00p_rec_key: row[:z00p_rec_key],
   z00p_library: row[:z00p_library],
   z00p_doc_number: row[:z00p_doc_number],
   normalized: result,
   z00p_status: row[:z00p_status],
   z00p_timestamp: row[:z00p_timestamp] 
  }
end

transformation_buffer(options[:bulk_size])
destination Metacrunch::Db::Writer.new(options[:db], ->(db) {
  db[:normalized_data]},
  {:user=>options[:login],
   :password=>options[:pw],
   :use_upsert=>true,
   :id_key=>:z00p_rec_key
  }
)